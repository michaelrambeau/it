// Using `pegasus` to make ajax calls
function pegasus(a,b){return b=new XMLHttpRequest,b.open("GET",a),a=[],b.onreadystatechange=b.then=function(c,d,e,f){if(c&&c.call&&(a=[,c,d]),4==b.readyState&&(e=a[0|b.status/200])){try{f=JSON.parse(b.responseText)}catch(g){f=null}e(f,b)}},b.send(),b}

// Fetch my starred repos
function getRepos(cb) {
  const url = 'https://api.github.com/users/michaelrambeau/starred';
  pegasus(url).then(function(data) {
    cb(data);
  });
}

// Render starred repos in the page
function renderRepos(repos) {
  var tempFn = doT.template(getTemplate());
  var resultText = tempFn({foo: 'with doT', repos: repos});
  document.getElementById('repos').innerHTML = resultText;
}

// return the template that will be passed to the template engine
function getTemplate() {
  var template = `
    <table>
    {{~it.repos: repo}}
        <tr class="github-project">
          <td>
            <a href={{!getProjectURL(repo)}}>{{!repo.name}}</a>
            <span class="count">
              <i class="octicon octicon-star"></i>
              {{!repo.stargazers_count}}
            </span>
            <p class="description">
              <i class="octicon octicon-quote icon"></i>
              {{!getDescription(repo)}}
              <i class="octicon octicon-quote icon"></i>
            </p>
          </td>
        </tr>
    {{~}}
    </table>
  `;
  return template;
}

// Return project URL
function getProjectURL(repo) {
  return repo.homepage ? repo.homepage : repo.html_url;
}

// Return project description, removing emojis
function getDescription(repo) {
  return repo.description.replace(/\:[a-z_\d]+\:/g, '').trim();
}

// Fetch and render: START!
getRepos(function(json) {
  renderRepos(json);
});
